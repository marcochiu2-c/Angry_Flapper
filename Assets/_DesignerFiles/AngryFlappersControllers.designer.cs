// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UniRx;
using UnityEngine;


public abstract class BirdControllerBase : Controller {
    
    [Inject("AngryFlappersGame")] public AngryFlappersGameViewModel AngryFlappersGame { get; set; }
    [Inject("MenuRoot")] public MenuRootViewModel MenuRoot { get; set; }
    [Inject] public AngryFlappersGameController AngryFlappersGameController {get;set;}
    public abstract void InitializeBird(BirdViewModel bird);
    
    public override ViewModel CreateEmpty() {
        return new BirdViewModel(this);
    }
    
    public virtual BirdViewModel CreateBird() {
        return ((BirdViewModel)(this.Create()));
    }
    
    public override void Initialize(ViewModel viewModel) {
        this.InitializeBird(((BirdViewModel)(viewModel)));
    }
    
    public virtual void Hit(BirdViewModel bird) {
    }
}

public abstract class PipeControllerBase : Controller {
    
    [Inject("AngryFlappersGame")] public AngryFlappersGameViewModel AngryFlappersGame { get; set; }
    [Inject("MenuRoot")] public MenuRootViewModel MenuRoot { get; set; }
    [Inject] public AngryFlappersGameController AngryFlappersGameController {get;set;}
    public abstract void InitializePipe(PipeViewModel pipe);
    
    public override ViewModel CreateEmpty() {
        return new PipeViewModel(this);
    }
    
    public virtual PipeViewModel CreatePipe() {
        return ((PipeViewModel)(this.Create()));
    }
    
    public override void Initialize(ViewModel viewModel) {
        this.InitializePipe(((PipeViewModel)(viewModel)));
    }
    
    public virtual void Passed(PipeViewModel pipe) {
    }
    
    public virtual void RemoveFromScreen(PipeViewModel pipe) {
    }
}

public abstract class AngryFlappersGameControllerBase : Controller {
    
    [Inject("AngryFlappersGame")] public AngryFlappersGameViewModel AngryFlappersGame { get; set; }
    [Inject("MenuRoot")] public MenuRootViewModel MenuRoot { get; set; }
    [Inject] public BirdController BirdController {get;set;}
    [Inject] public PipeController PipeController {get;set;}
    public abstract void InitializeAngryFlappersGame(AngryFlappersGameViewModel angryFlappersGame);
    
    public override ViewModel CreateEmpty() {
        return new AngryFlappersGameViewModel(this);
    }
    
    public virtual AngryFlappersGameViewModel CreateAngryFlappersGame() {
        return ((AngryFlappersGameViewModel)(this.Create()));
    }
    
    public override void Initialize(ViewModel viewModel) {
        this.InitializeAngryFlappersGame(((AngryFlappersGameViewModel)(viewModel)));
    }
    
    public virtual void GameOver(AngryFlappersGameViewModel angryFlappersGame) {
    }
    
    public virtual void Play(AngryFlappersGameViewModel angryFlappersGame) {
    }
    
    public virtual void GoToMenu(AngryFlappersGameViewModel angryFlappersGame) {
    }
}

public abstract class MenuRootControllerBase : Controller {
    
    [Inject("AngryFlappersGame")] public AngryFlappersGameViewModel AngryFlappersGame { get; set; }
    [Inject("MenuRoot")] public MenuRootViewModel MenuRoot { get; set; }
    public abstract void InitializeMenuRoot(MenuRootViewModel menuRoot);
    
    public override ViewModel CreateEmpty() {
        return new MenuRootViewModel(this);
    }
    
    public virtual MenuRootViewModel CreateMenuRoot() {
        return ((MenuRootViewModel)(this.Create()));
    }
    
    public override void Initialize(ViewModel viewModel) {
        this.InitializeMenuRoot(((MenuRootViewModel)(viewModel)));
    }
    
    public virtual void GoToGame(MenuRootViewModel menuRoot) {
    }
}

public abstract class CamControllerBase : Controller {
    
    [Inject("AngryFlappersGame")] public AngryFlappersGameViewModel AngryFlappersGame { get; set; }
    [Inject("MenuRoot")] public MenuRootViewModel MenuRoot { get; set; }
    public abstract void InitializeCam(CamViewModel cam);
    
    public override ViewModel CreateEmpty() {
        return new CamViewModel(this);
    }
    
    public virtual CamViewModel CreateCam() {
        return ((CamViewModel)(this.Create()));
    }
    
    public override void Initialize(ViewModel viewModel) {
        this.InitializeCam(((CamViewModel)(viewModel)));
    }
}
