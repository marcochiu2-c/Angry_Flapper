// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UniRx;


[System.SerializableAttribute()]
public sealed partial class AngryFlapperManagerSettings {
    
    public string[] _Scenes;
}

// <summary>
// The responsibility of this class is to manage the scenes Initialization, Loading, Transitioning, and Unloading.
// </summary>
public class AngryFlapperManagerBase : SceneManager {
    
    private AngryFlappersGameViewModel _AngryFlappersGame;
    
    private BirdController _BirdController;
    
    private PipeController _PipeController;
    
    private AngryFlappersGameController _AngryFlappersGameController;
    
    private CamController _CamController;
    
    public AngryFlapperManagerSettings _AngryFlapperManagerSettings = new AngryFlapperManagerSettings();
    
    [Inject("AngryFlappersGame")]
    public virtual AngryFlappersGameViewModel AngryFlappersGame {
        get {
            if ((this._AngryFlappersGame == null)) {
                this._AngryFlappersGame = CreateInstanceViewModel<AngryFlappersGameViewModel>(AngryFlappersGameController, "AngryFlappersGame");
            }
            return this._AngryFlappersGame;
        }
        set {
            _AngryFlappersGame = value;
        }
    }
    
    [Inject()]
    public virtual BirdController BirdController {
        get {
            if ((this._BirdController == null)) {
                this._BirdController = new BirdController() { Container = Container };
            }
            return this._BirdController;
        }
        set {
            _BirdController = value;
        }
    }
    
    [Inject()]
    public virtual PipeController PipeController {
        get {
            if ((this._PipeController == null)) {
                this._PipeController = new PipeController() { Container = Container };
            }
            return this._PipeController;
        }
        set {
            _PipeController = value;
        }
    }
    
    [Inject()]
    public virtual AngryFlappersGameController AngryFlappersGameController {
        get {
            if ((this._AngryFlappersGameController == null)) {
                this._AngryFlappersGameController = new AngryFlappersGameController() { Container = Container };
            }
            return this._AngryFlappersGameController;
        }
        set {
            _AngryFlappersGameController = value;
        }
    }
    
    [Inject()]
    public virtual CamController CamController {
        get {
            if ((this._CamController == null)) {
                this._CamController = new CamController() { Container = Container };
            }
            return this._CamController;
        }
        set {
            _CamController = value;
        }
    }
    
    // <summary>
    // This method is the first method to be invoked when the scene first loads. Anything registered here with 'Container' will effectively 
    // be injected on controllers, and instances defined on a subsystem.And example of this would be Container.RegisterInstance<IDataRepository>(new CodeRepository()). Then any property with 
    // the 'Inject' attribute on any controller or view-model will automatically be set by uFrame. 
    // </summary>
    public override void Setup() {
        base.Setup();
        Container.RegisterViewModel<AngryFlappersGameViewModel>(AngryFlappersGame,"AngryFlappersGame");
        Container.RegisterController<BirdController>(BirdController);
        Container.RegisterController<PipeController>(PipeController);
        Container.RegisterController<AngryFlappersGameController>(AngryFlappersGameController);
        Container.RegisterController<CamController>(CamController);
        this.Container.InjectAll();
        AngryFlappersGameController.Initialize(AngryFlappersGame);
    }
    
    public override void Initialize() {
        base.Initialize();
    }
}

[System.SerializableAttribute()]
public sealed partial class MenuSettings {
    
    public string[] _Scenes;
}

// <summary>
// The responsibility of this class is to manage the scenes Initialization, Loading, Transitioning, and Unloading.
// </summary>
public class MenuBase : SceneManager {
    
    private MenuRootViewModel _MenuRoot;
    
    private MenuRootController _MenuRootController;
    
    public MenuSettings _MenuSettings = new MenuSettings();
    
    [Inject("MenuRoot")]
    public virtual MenuRootViewModel MenuRoot {
        get {
            if ((this._MenuRoot == null)) {
                this._MenuRoot = CreateInstanceViewModel<MenuRootViewModel>(MenuRootController, "MenuRoot");
            }
            return this._MenuRoot;
        }
        set {
            _MenuRoot = value;
        }
    }
    
    [Inject()]
    public virtual MenuRootController MenuRootController {
        get {
            if ((this._MenuRootController == null)) {
                this._MenuRootController = new MenuRootController() { Container = Container };
            }
            return this._MenuRootController;
        }
        set {
            _MenuRootController = value;
        }
    }
    
    // <summary>
    // This method is the first method to be invoked when the scene first loads. Anything registered here with 'Container' will effectively 
    // be injected on controllers, and instances defined on a subsystem.And example of this would be Container.RegisterInstance<IDataRepository>(new CodeRepository()). Then any property with 
    // the 'Inject' attribute on any controller or view-model will automatically be set by uFrame. 
    // </summary>
    public override void Setup() {
        base.Setup();
        Container.RegisterViewModel<MenuRootViewModel>(MenuRoot,"MenuRoot");
        Container.RegisterController<MenuRootController>(MenuRootController);
        this.Container.InjectAll();
        MenuRootController.Initialize(MenuRoot);
    }
    
    public override void Initialize() {
        base.Initialize();
    }
}
